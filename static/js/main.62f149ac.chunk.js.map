{"version":3,"sources":["utils/API.js","images/loading.png","Components/Loading.js","Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/Switcher.js","App.js","reportWebVitals.js","index.js"],"names":["API","options","method","headers","fetchData","route","a","caches","open","cache","match","undefined","response","json","fetch","then","res","ok","Error","entries","pair","Number","add","setTimeout","delete","console","log","Loading","src","loading","alt","className","Scroll","props","isLoading","children","Card","info","name","price","color","join","manufacturer","availability","CardList","list","map","item","index","Switcher","categories","categoryOnDisplay","switchCategory","style","border","onClick","productCategories","initialCategory","App","fetchProduct","productCategory","manufacturers","Set","data","forEach","setState","products","catch","fetchAvailability","productsWithAvailability","state","availabilityInfo","find","one","id","toLowerCase","productAvailability","DATAPAYLOAD","replace","length","prevState","slice","newCategory","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62f149ac.chunk.js","sourcesContent":["const API = \"https://bad-api-assignment.reaktor.com/\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"Cache-Control\": \"max-age=300, must-revalidate\",\n  // \"x-force-error-mode\": \"all\",\n};\n\nconst options = {\n  method: \"GET\",\n  headers,\n};\n\nasync function fetchData(route) {\n  const cache = await caches.open(\"my-cache\");\n  const response = await cache.match(`${API}${route}`);\n  if (response !== undefined) {\n    return response.json();\n  } else {\n    return fetch(`${API}${route}`, options).then((res) => {\n      if (res.ok) {\n        // work-around: not to save response from server when only \"[]\" is returned\n        for (let pair of res.headers.entries()) {\n          if (pair[0] === \"content-length\") {\n            if (Number(pair[1]) < 50) {\n              fetchData(route);\n            } else {\n              // cache all responses for 5 minutes\n              cache.add(`${API}${route}`);\n              setTimeout(() => cache.delete(`${API}${route}`), 1000 * 60 * 5);\n              return res.json();\n            }\n          }\n          console.log(pair);\n        }\n      } else {\n        throw new Error(\"request failed\");\n      }\n    });\n  }\n}\n\nexport default fetchData;\n","export default __webpack_public_path__ + \"static/media/loading.b33cf617.png\";","import loading from \"../images/loading.png\";\n\nfunction Loading() {\n  return (\n    <div>\n      <img src={loading} alt=\"loading\" className=\"rotation\"></img>\n    </div>\n  );\n}\n\nexport default Loading;\n","import Loading from \"./Loading\";\n\nfunction Scroll(props) {\n  return (\n    <div className=\"scroll\">\n      {props.isLoading ? <Loading /> : <div>{props.children}</div>}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import Loading from \"./Loading\";\n\nfunction Card({ info }) {\n  return (\n    <div className=\"card\">\n      <p className=\"name\">{info.name}</p>\n      <p>Price: {info.price}</p>\n      <p>Colors: {info.color.join(\"-\")}</p>\n      <p>Mfr.: {info.manufacturer}</p>\n      {info.availability ? (\n        <p\n          className={\n            info.availability === \"OUT OF STOCK\"\n              ? \"out\"\n              : info.availability === \"LESS THAN 10\"\n              ? \"less-than-10\"\n              : \"\"\n          }\n        >\n          {info.availability}\n        </p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n}\nexport default Card;\n","import Card from \"./Card\";\n\nfunction CardList({ list }) {\n  return (\n    <div className=\"grid\">\n      {list.map((item, index) => (\n        <Card key={index} info={item} />\n      ))}\n    </div>\n  );\n}\n\nexport default CardList;\n","function Switcher({ categories, categoryOnDisplay, switchCategory }) {\n  return (\n    <div className=\"switcher flex-row\">\n      {categories.map((item, index) => {\n        return (\n          <button\n            style={\n              categoryOnDisplay === item ? { border: \"2px solid black\" } : {}\n            }\n            onClick={() => switchCategory(item)}\n            key={index}\n          >\n            {item}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Switcher;\n","import { Component } from \"react\";\n\nimport \"./App.css\";\nimport fetchData from \"./utils/API\";\n\nimport Scroll from \"./Components/Scroll\";\nimport CardList from \"./Components/CardList\";\nimport Switcher from \"./Components/Switcher\";\nimport Loading from \"./Components/Loading\";\n\nconst productCategories = [\"jackets\", \"shirts\", \"accessories\"];\nconst initialCategory = \"shirts\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      productCategories,\n      categoryOnDisplay: initialCategory,\n      products: [],\n      manufacturers: [],\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProduct(initialCategory);\n  }\n\n  componentDidUpdate() {\n    // availability info for products is fetched from separate API /availability/:manufacterer\n    if (this.state.manufacturers.length) {\n      this.fetchAvailability(this.state.manufacturers[0]);\n    }\n  }\n\n  // fetch products in the chosen category and update the State\n  fetchProduct = (productCategory) => {\n    let manufacturers = new Set();\n    return fetchData(`products/${productCategory}`)\n      .then((data) => {\n        data.forEach((item) => manufacturers.add(item.manufacturer));\n        this.setState({\n          products: data,\n          isLoading: false,\n          manufacturers: [...manufacturers],\n        });\n      })\n      .catch(console.log);\n  };\n\n  //  fetch availability of the manufacturer, then upload it to products array and update the State\n  fetchAvailability = (manufacturer) => {\n    fetchData(`availability/${manufacturer}`)\n      .then((data) => {\n        const availability = data.response;\n        let productsWithAvailability = this.state.products;\n        // go through the products array and search for the same id in the availability array, which was just fetched\n        for (let index = 0; index < productsWithAvailability.length; index++) {\n          if (productsWithAvailability[index].manufacturer === manufacturer) {\n            const availabilityInfo = availability.find(\n              (one) =>\n                productsWithAvailability[index].id === one.id.toLowerCase()\n            );\n            if (availabilityInfo !== undefined) {\n              // work-around: format data from the source\n              let productAvailability = availabilityInfo.DATAPAYLOAD.replace(\n                \"<AVAILABILITY>\\n  <INSTOCKVALUE>\",\n                \"\"\n              );\n              productAvailability = productAvailability.replace(\n                \"</INSTOCKVALUE>\\n</AVAILABILITY>\",\n                \"\"\n              );\n              switch (productAvailability) {\n                case \"OUTOFSTOCK\":\n                  productAvailability = \"OUT OF STOCK\";\n                  break;\n                case \"LESSTHAN10\":\n                  productAvailability = \"LESS THAN 10\";\n                  break;\n                case \"INSTOCK\":\n                  productAvailability = \"IN STOCK\";\n                  break;\n                default:\n                  break;\n              }\n              // upload availability info to product\n              productsWithAvailability[\n                index\n              ].availability = productAvailability;\n            }\n          } else {\n            continue;\n          }\n        }\n        //update products array\n        this.setState((prevState) => ({\n          ...prevState,\n          products: productsWithAvailability,\n          // delete manufacturer from the list if availability for it was already fetchec and uploaded to products\n          manufacturers: prevState.manufacturers.slice(\n            1,\n            prevState.manufacturers.length\n          ),\n        }));\n      })\n      .catch(console.log);\n  };\n\n  // is invoked when user changes product category by pressing the button with the category name on it\n  switchCategory = (newCategory) => {\n    this.setState({ categoryOnDisplay: newCategory, isLoading: true });\n    this.fetchProduct(newCategory);\n  };\n\n  render() {\n    return (\n      <div>\n        <Switcher\n          categoryOnDisplay={this.state.categoryOnDisplay}\n          categories={this.state.productCategories}\n          switchCategory={this.switchCategory}\n        />\n        {this.state.isLoading ? (\n          <Loading />\n        ) : (\n          <Scroll>\n            <CardList list={this.state.products} />\n          </Scroll>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}